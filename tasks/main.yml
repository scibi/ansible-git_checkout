---
- name: Prepare git environment
  set_fact:
    git_checkout__register_git_environment: '{{ lookup("template", "lookup/git_environment.j2") | from_yaml }}'

- name: Make sure git is installed
  apt:
    name: 'git'
    state: 'latest'
    install_recommends: False

- name: Check if {{ git_checkout__name }} is checked out
  stat:
    path: '{{ git_checkout__app_path }}'
  register: git_checkout__register_app_directory

- name: Make sure home directory and its parents exists
  file:
    path: '{{ git_checkout__app_home_path }}'
    state: 'directory'
    recurse: 'yes'

- name: Create {{ git_checkout__group }} group
  group:
    name: '{{ git_checkout__group }}'
    system: True
    state: 'present'

- name: Create {{ git_checkout__user }} user
  user:
    name: '{{ git_checkout__user }}'
    group: '{{ git_checkout__group }}'
    home: '{{ git_checkout__app_home_path }}'
    comment: '{{ git_checkout__name }}'
    generate_ssh_key: True
    append: True
    system: True
    state: 'present'

- name: Set owner and permissions of home dir
  file:
    path: '{{ git_checkout__app_home_path }}'
    state: 'directory'
    owner: '{{ git_checkout__user }}'
    group: '{{ git_checkout__group }}'
    mode: '0755'

- import_tasks: deploy_key.yml
  when: git_checkout__deploy_key_enable

#- name: git_checkout__src_path
#  debug:
#    msg: '{{ git_checkout__src_path }}'
#
#- name: git_checkout__app_path
#  debug:
#    msg: '{{ git_checkout__app_path }}'

- name: Check if bare repository is cloned
  stat:
    path: '{{ git_checkout__src_path }}'
  register: git_checkout__register_repo_cloned

#- name: git_checkout__register_repo_cloned
#  debug:
#    msg: '{{ git_checkout__register_repo_cloned }}'

- import_tasks: new_install.yml
  when: not git_checkout__register_repo_cloned.stat.exists

- import_tasks: update.yml


#################
- name: Set output facts
  set_fact:
    git_checkout__register_status_tmp:
      updated: "{{ (git_checkout__register_old_head.stdout != git_checkout__register_new_head.stdout) or (git_checkout__submodules_enable and git_checkout__register_submodule_update.stdout != '') }}"
      new_install: '{{ not git_checkout__register_repo_cloned.stat.exists }}'
      changed: "{{ ((git_checkout__register_old_head.stdout != git_checkout__register_new_head.stdout) or (git_checkout__submodules_enable and git_checkout__register_submodule_update.stdout != '')) or not git_checkout__register_repo_cloned.stat.exists }}"
      checkout_path: '{{ git_checkout__app_path }}'

#- name: git_checkout__register_status_tmp
#  debug:
#    msg: '{{ git_checkout__register_status_tmp }}'

- name: Make sure git_checkout__register_status is a dict
  set_fact:
    git_checkout__register_status: '{{ git_checkout__register_status|d({}) }}'

#- name: git_checkout__register_status
#  debug:
#    msg: '{{ git_checkout__register_status }}'

- name: Update git_checkout__register_status
  set_fact:
    git_checkout__register_status: '{{ dict(git_checkout__register_status.items() + [(git_checkout__name, git_checkout__register_status_tmp)]) }}'

- name: git_checkout__register_status
  debug:
    msg: '{{ git_checkout__register_status }}'

